[{"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/index.js":"1","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/App.js":"2","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/utils/useGlobalState.js":"3","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/home.js":"4","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/gridEditor.js":"5","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/login.js":"6","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/gridViewer.js":"7","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/ownGrids.js":"8"},{"size":220,"mtime":1636206258061,"results":"9","hashOfConfig":"10"},{"size":931,"mtime":1636223437989,"results":"11","hashOfConfig":"10"},{"size":1532,"mtime":1636190077880,"results":"12","hashOfConfig":"10"},{"size":1131,"mtime":1636222184040,"results":"13","hashOfConfig":"10"},{"size":10044,"mtime":1636224530162,"results":"14","hashOfConfig":"10"},{"size":4584,"mtime":1636211108352,"results":"15","hashOfConfig":"10"},{"size":3532,"mtime":1636224625889,"results":"16","hashOfConfig":"10"},{"size":1846,"mtime":1636224675993,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zbhm5f",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/index.js",[],"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/App.js",[],"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/utils/useGlobalState.js",[],"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/home.js",[],"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/gridEditor.js",["37","38","39"],"import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\nimport { useParams } from \"react-router-dom\";\nconst pkg = require('../../package.json')\n\nfunction GridEditor(props) {\n    const globalState = useGlobalState()\n    const [dimensions, setDimensions] = useState([10, 10])\n    const [dimensionsFrozen, setDimensionsFrozen] = useState(false)\n    const [solutions, setSolutions] = useState([])\n    const [selectedBlock, setSelectedBlock] = useState(null)\n    const [title, setTitle] = useState('')\n    const [pub, setPub] = useState(false)\n    const [def, setDef] = useState([[], []])\n    const { username, api_token } = globalState.user\n    const {uid: gridId} = useParams();\n\n\n    const loadGrid = async (id) => {\n        try {\n            const r = await fetch(process.env.REACT_APP_API_URL+'/grid/'+id, {\n                method: 'GET',\n                credentials: 'omit',\n                headers: {\n                    'Authorization': 'Token ' + api_token,\n                    'Content-Type': 'application/json'\n                }\n            })\n            const d = await r.json()\n            setDimensions([d.width, d.height])\n            setTitle(d.title)\n            const a = []\n            for (let j=0; j< d.height; j++){\n                a.push([])\n                for (let i=0; i< d.width; i++){\n                    const ch = d.solution[j*d.width+i]\n                    a[j].push(ch === '_' ? '': ch.toUpperCase())\n                }\n            }\n            setSolutions(a)\n            setDef(d.definitions)\n            setPub(d.published)\n            setDimensionsFrozen(true)\n        } catch(e) {\n            window.location = '/'\n        }\n    }\n\n    useEffect(()=>{\n        if (gridId) {\n            (async () => (await loadGrid(gridId)))()\n        }\n            \n    }, [gridId])\n\n    const onChangeWidth = (ev) => {\n        setDimensions([ev.target.value, dimensions[1]])\n    }\n\n    const onChangeHeight = (ev) => {\n        setDimensions([dimensions[0], ev.target.value])\n    }\n\n    const freezeDimensions = () => {\n        setDimensionsFrozen(true)\n        \n        const arr = []\n        const arr2 = [[], []]\n        for (let i=0; i < dimensions[1]; i++) {\n            arr.push([])\n            arr2[0].push('')\n            for (let j=0; j < dimensions[0]; j++) {\n                arr[i].push('')\n            }\n        }\n        for (let j=0; j < dimensions[0]; j++) {\n            arr2[1].push('')\n        }\n        setSolutions(arr)\n        setDef(arr2)\n    }\n   \n    const selectBlock = (i, j) => {\n        setSelectedBlock([i, j])\n    }\n\n    const setSolutionXY = (i, j, e) => {\n        e.preventDefault()\n        const char = e.key.toLowerCase()\n        if (char.length === 1 && /[a-z -]/.test(char)){\n            const newSol = solutions;\n            newSol[i][j] = char.toUpperCase()\n            setSolutions(newSol)\n            setSelectedBlock(null);\n            document.activeElement.blur();\n        }\n        if(char === 'backspace'){\n            const newSol = solutions;\n            newSol[i][j] = ''\n            setSolutions(newSol)\n            setSelectedBlock(null);\n            document.activeElement.blur();\n        }\n    }\n\n    const setHorizontalDef = (i, txt) => {\n        const tmp = def\n        tmp[0][i] = txt\n        setDef(tmp)\n    }\n\n    const setVerticalDef = (i, txt) => {\n        const tmp = def\n        tmp[1][i] = txt\n        setDef(tmp)\n    }\n\n    const romanize = (num) => {\n        if (isNaN(num))\n            return NaN;\n        var digits = String(+num).split(\"\"),\n            key = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\",\n                   \"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\",\n                   \"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n            roman = \"\",\n            i = 3;\n        while (i--)\n            roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n        return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n    }\n\n    const save = async () => {\n        try {\n            const url = process.env.REACT_APP_API_URL + '/grid/' + (gridId ? gridId : 'new')\n            const response = await fetch(url, {\n                method: gridId ? 'PUT' : 'POST',\n                credentials: 'omit',\n                headers: {\n                    'Authorization': 'Token ' + api_token,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    width: dimensions[0],\n                    height: dimensions[1],\n                    title: title !== '' ? title : 'Grille sans titre',\n                    solution: solutions.map(l=>l.map(c=> (c==='' ? '_' : (c === ' ' ? '#' : c.toLowerCase()))).join('')).join(''),\n                    definitions: def,\n                    published: pub ? (!solutions.map(l=>l.map(c=> (c==='' ? '_' : (c === ' ' ? '#' : c.toLowerCase()))).join('')).join('').includes('_')) : false\n                })\n            })\n            if (response.status===200 || response.status===201) {\n                const res = await response.json();\n                window.location = `/grille/${res.id}/modifier`\n            } else {\n                throw new Error('not ok status')\n            }\n        } catch (e) {\n            alert('Une erreur est survenue...')\n        }\n    }\n\n    const publish = async () => {\n        await fetch(process.env.REACT_APP_API_URL+'/grid/'+gridId, {\n            method: 'PUT',\n            credentials: 'omit',\n            headers: {\n                'Authorization': 'Token ' + api_token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                width: dimensions[0],\n                height: dimensions[1],\n                title: title !== '' ? title : 'Grille sans titre',\n                solution: solutions.map(l=>l.map(c=> (c === ' ' ? '#' : c.toLowerCase())).join('')).join(''),\n                definitions: def,\n                published: true\n            })\n        })\n        window.location = '/grille/' + gridId\n    }\n    const deleteG = async () => {\n        await fetch(process.env.REACT_APP_API_URL+'/grid/'+gridId, {\n            method: 'DELETE',\n            credentials: 'omit',\n            headers: {\n                'Authorization': 'Token ' + api_token,\n                'Content-Type': 'application/json'\n            },\n        })\n        window.location = '/'\n    }\n\n    const isGridFull = () => {\n        return solutions.map(l=>l.map(c=> c).join('')).join('').length === dimensions[0]*dimensions[1]\n    }\n    return (\n        <div className=\"container main-container\">\n            <h1>{gridId ? 'Editeur de grille':'Nouvelle grille'} </h1>\n            \n            {!dimensionsFrozen && (<>\n                <h3>Dimensions</h3>\n                <label for=\"width\">Largeur</label>\n                <input name=\"width\" type=\"number\" min=\"1\" onChange={onChangeWidth} defaultValue={dimensions[0]}></input>\n                <label for=\"height\">Hauteur</label>\n                <input name=\"height\" type=\"number\" min=\"1\" onChange={onChangeHeight} defaultValue={dimensions[1]}></input>\n                <button class=\"btn btn-primary\" onClick={freezeDimensions}>Continuer</button>\n            </>)}\n            {dimensionsFrozen && (<><label>Titre: </label><input type='text' onChange={(e)=>setTitle(e.target.Value)} placeholder=\"Titre de la grille\" defaultValue={title}></input> {pub && <span class=\"badge bg-danger\">publié</span>}<table>\n                <tr><td> </td>{solutions[0].map((val, j)=>(<td style={{textAlign: 'center'}}>{romanize(j+1)}.</td>))}</tr>\n                { solutions.map((line, i)=>(\n                    <tr><td>{i+1}.</td>{line.map((val, j)=>(<td style={{width: '2em', height: '2em', border: '1px solid #000'}}><input type='text' onFocus={() => selectBlock(i, j)} onBlur={() => selectBlock(null)} style={{outline: 'none', textAlign: 'center', border: '0', caretColor: 'transparent', width: '2em', backgroundColor: ((selectedBlock && (selectedBlock[0] === i && selectedBlock[1] === j)) ? 'red' : (val === ' ' ? 'black' : 'white'))}} onKeyDown={(e) => setSolutionXY(i, j, e)} readOnly value={solutions[i][j] ? val : ''}/></td>))}</tr>\n                ))\n                }\n                </table>\n                <p>Cliquer sur une case et taper la lettre désiré, Espace pour noircire la case, Retour arrière pour re-initialiser la case.</p>\n                <div style={{marginTop: '15px'}}>\n                    <button class=\"btn btn-primary save-btn\" onClick={save}>Sauvegarder</button>\n                </div>\n                <h3>Définitions</h3>\n                <h4>Horizontalement</h4>\n                <div>\n                {solutions.map((l, i) => (\n                    <div style={{margin: '5px'}}><span style={{width: '3em', display: 'inline-block'}}>{i+1}. </span><input  style={{width: '500px'}} type=\"text\"  onChange={(e) => setHorizontalDef(i, e.target.value)} defaultValue={def[0][i]}></input></div>\n                ))}\n                </div>\n                <h4>Verticalement</h4>\n                <div>\n                {solutions[0].map((l, i) => (\n                    <div style={{margin: '5px'}}><span style={{width: '3em', display: 'inline-block'}}>{romanize(i+1)}. </span><input style={{width: '500px'}} type=\"text\" onChange={(e) => setVerticalDef(i, e.target.value)} defaultValue={def[1][i]}></input></div>\n                ))}\n                </div>\n                <div style={{marginTop: '15px'}}>\n                    <button class=\"btn btn-primary save-btn\" onClick={save}>Sauvegarder</button>\n                </div>\n                <div style={{marginTop: '15px'}}>\n                    <button class=\"btn btn-danger\" onClick={deleteG}>Supprimer</button>\n                </div>\n                {isGridFull() && gridId && <div style={{marginTop: '15px'}}>\n                    <button class=\"btn btn-success\" onClick={publish}>Publier</button>\n                </div>}\n                </>)\n            }\n        </div>\n    )\n}\n\nexport default GridEditor","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/login.js",[],"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/gridViewer.js",["40","41","42"],"import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\nimport { useParams } from \"react-router-dom\";\nimport { useReactToPrint } from 'react-to-print';\nconst pkg = require('../../package.json')\n\n\nfunction GridEditor() {\n    const globalState = useGlobalState()\n    const [solutions, setSolutions] = useState([])\n    const [title, setTitle] = useState('')\n    const [def, setDef] = useState([[], []])\n    const { username, api_token } = globalState.user\n    const {uid: gridId} = useParams();\n    const componentRef = React.useRef();\n    const print = useReactToPrint({\n      content: () => componentRef.current,\n    });\n\n    const loadGrid = async (id) => {\n        try {\n            const r = await fetch(process.env.REACT_APP_API_URL+'/grid/'+id)\n            const d = await r.json()\n            setTitle(d.title)\n            const a = []\n            for (let j=0; j< d.height; j++){\n                a.push([])\n                for (let i=0; i< d.width; i++){\n                    const ch = d.grid[j*d.width+i]\n                    a[j].push(ch === '_' ? '': ch.toUpperCase())\n                }\n            }\n            setSolutions(a)\n            setDef(d.definitions)\n        } catch(e) {\n            window.location = '/'\n        }\n    }\n\n    useEffect(()=>{\n        if (gridId) {\n            (async () => (await loadGrid(gridId)))()\n        }\n            \n    }, [gridId])\n\n\n    const romanize = (num) => {\n        if (isNaN(num))\n            return NaN;\n        var digits = String(+num).split(\"\"),\n            key = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\",\n                   \"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\",\n                   \"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n            roman = \"\",\n            i = 3;\n        while (i--)\n            roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n        return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n    }\n\n    return (\n        <div className=\"container main-container\">\n            { !!solutions.length && (<div ref={componentRef} style={{margin:'15px'}}><h1>{title}</h1><table>\n                <tr><td> </td>{solutions[0].map((val, j)=>(<td style={{textAlign: 'center'}}>{romanize(j+1)}.</td>))}</tr>\n                { solutions.map((line, i)=>(\n                    <tr><td>{i+1}.</td>{line.map((val, j)=>(<td style={{width: '2em', height: '2em', border: '1px solid #000', backgroundColor: (val === ' ' ? 'black' : 'white')}}><span style={{textAlign: 'center'}}>{solutions[i][j] ? val : ''}</span></td>))}</tr>\n                ))\n                }\n                </table>\n                <p>Cliquer sur une case et taper la lettre désiré, Retour arrière pour re-initialiser la case.</p>\n                <h3>Définitions</h3>\n                <h4>Horizontalement</h4>\n                <div>\n                {def[0].map((l, i) => (\n                    <div style={{margin: '5px'}}><span style={{width: '3em', display: 'inline-block'}}>{i+1}. </span><span>{l}</span></div>\n                ))}\n                </div>\n                <h4>Verticalement</h4>\n                <div>\n                {def[1].map((l, i) => (\n                    <div style={{margin: '5px'}}><span style={{width: '3em', display: 'inline-block'}}>{romanize(i+1)}. </span><span>{l}</span></div>\n                ))}\n                </div>\n                </div>)\n            }\n            <button class=\"btn btn-primary\" onClick={print}>Imprimer</button>\n        </div>\n    )\n}\n\nexport default GridEditor","/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/ownGrids.js",["43","44"],"import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\nimport { Link } from \"react-router-dom\";\nconst pkg = require('../../package.json')\n\n\nfunction OwnGrids() {\n    const globalState = useGlobalState()\n    const [list, setList] = useState('')\n    const { username, api_token } = globalState.user\n\n    const loadGrids = async () => {\n        try {\n            const r = await fetch(process.env.REACT_APP_API_URL+'/user/'+username,{\n                method: 'GET',\n                credentials: 'omit',\n                headers: {\n                    'Authorization': 'Token ' + api_token,\n                    'Content-Type': 'application/json'\n                }\n            })\n            const list = await r.json()\n            setList(list.crosswords_grids)\n        } catch(e) {\n            window.location = '/'\n        }\n    }\n\n    useEffect(()=>{\n        (async () => (await loadGrids()))()     \n    }, [])\n\n    return (\n        <div className=\"container main-container\">\n            { !!list.length ? (list.map((e=>(\n                <><div style={{width: '100%'}}>\n                    <h3 style={{width: '100%'}}>{e.published ? <Link to={\"/grille/\"+e.id}>{e.title}</Link> : e.title} <Link to={\"/grille/\"+e.id+'/modifier'}><button class=\"float-right btn btn-primary\">Modifier</button></Link></h3>\n                    <span>{e.width}x{e.height} {e.published && <span class=\"badge bg-danger\">publié</span>}</span><br/>\n                    <span>Créée {(new Date(e.creation_date)).toLocaleDateString(\"fr-FR\")}</span><br/>\n                    <span>Modifiée {(new Date(e.modification_date)).toLocaleDateString(\"fr-FR\")}</span>\n                </div>\n                <hr/>\n                </>\n            )))): <h2>Pas de grilles</h2>\n            }\n        </div>\n    )\n}\n\nexport default OwnGrids",{"ruleId":"45","severity":1,"message":"46","line":4,"column":7,"nodeType":"47","messageId":"48","endLine":4,"endColumn":10},{"ruleId":"45","severity":1,"message":"49","line":15,"column":13,"nodeType":"47","messageId":"48","endLine":15,"endColumn":21},{"ruleId":"50","severity":1,"message":"51","line":54,"column":8,"nodeType":"52","endLine":54,"endColumn":16,"suggestions":"53"},{"ruleId":"45","severity":1,"message":"46","line":5,"column":7,"nodeType":"47","messageId":"48","endLine":5,"endColumn":10},{"ruleId":"45","severity":1,"message":"49","line":13,"column":13,"nodeType":"47","messageId":"48","endLine":13,"endColumn":21},{"ruleId":"45","severity":1,"message":"54","line":13,"column":23,"nodeType":"47","messageId":"48","endLine":13,"endColumn":32},{"ruleId":"45","severity":1,"message":"46","line":4,"column":7,"nodeType":"47","messageId":"48","endLine":4,"endColumn":10},{"ruleId":"50","severity":1,"message":"55","line":31,"column":8,"nodeType":"52","endLine":31,"endColumn":10,"suggestions":"56"},"no-unused-vars","'pkg' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadGrid'. Either include it or remove the dependency array.","ArrayExpression",["57"],"'api_token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadGrids'. Either include it or remove the dependency array.",["58"],{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [gridId, loadGrid]",{"range":"63","text":"64"},"Update the dependencies array to be: [loadGrids]",{"range":"65","text":"66"},[1838,1846],"[gridId, loadGrid]",[954,956],"[loadGrids]"]