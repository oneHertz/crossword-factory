{"ast":null,"code":"var _jsxFileName = \"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useGlobalState from '../utils/useGlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst pkg = require('../../package.json');\n\nfunction GridCreator() {\n  _s();\n\n  const globalState = useGlobalState();\n  const [dimensions, setDimensions] = useState([10, 10]);\n  const [dimensionsFrozen, setDimensionsFrozen] = useState(false);\n  const [gridFrozen, setGridFrozen] = useState(false);\n  const [solutions, setSolutions] = useState([]);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n\n  const onChangeWidth = ev => {\n    setDimensions([ev.target.value, dimensions[1]]);\n  };\n\n  const onChangeHeight = ev => {\n    setDimensions([dimensions[0], ev.target.value]);\n  };\n\n  const freezeDimensions = () => {\n    setDimensionsFrozen(true);\n    const arr = [];\n\n    for (let i = 0; i < dimensions[1]; i++) {\n      arr.push([]);\n\n      for (let j = 0; j < dimensions[0]; j++) {\n        arr[i].push('');\n      }\n    }\n\n    setSolutions(arr);\n  };\n\n  const freezeGrid = () => {\n    setGridFrozen(true);\n  };\n\n  const selectBlock = (i, j) => {\n    if (gridFrozen) return;\n    setSelectedBlock([i, j]);\n  };\n\n  const setSolutionXY = (i, j, e) => {\n    e.preventDefault();\n    if (gridFrozen) return;\n    const char = e.key.toLowerCase();\n\n    if (char.length === 1 && /[a-z -]/.test(char)) {\n      const newSol = solutions;\n      newSol[i][j] = char.toUpperCase();\n      setSolutions(newSol);\n      setSelectedBlock(null);\n    }\n\n    if (char === 'backspace') {\n      const newSol = solutions;\n      newSol[i][j] = '';\n      setSolutions(newSol);\n      setSelectedBlock(null);\n    }\n  };\n\n  const isGridFull = () => {\n    const serializedSolution = solutions.map(l => l.map(c => c).join('')).join('');\n    return serializedSolution.length === dimensions[0] * dimensions[1];\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nouvelle grille\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), !dimensionsFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dimensions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"width\",\n        children: \"Largeur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"width\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeWidth,\n        defaultValue: dimensions[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"height\",\n        children: \"Hauteur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"height\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeHeight,\n        defaultValue: dimensions[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-primary\",\n        onClick: freezeDimensions,\n        children: \"Continuer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), dimensionsFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: solutions.map((line, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: line.map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              width: '2em',\n              height: '2em',\n              border: '1px solid #000'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onFocus: () => selectBlock(i, j),\n              onUnfocus: () => selectBlock(null),\n              style: {\n                outline: 'none',\n                textAlign: 'center',\n                border: '0',\n                caretColor: 'transparent',\n                width: '2em',\n                backgroundColor: selectedBlock && selectedBlock[0] === i && selectedBlock[1] === j ? 'red' : val === ' ' ? 'black' : 'white'\n              },\n              onKeyDown: e => setSolutionXY(i, j, e),\n              value: solutions[i][j] ? val : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 114\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 46\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cliquer sur une case et taper la lettre d\\xE9sir\\xE9, Espace pour noircire la case, Retour arri\\xE8re pour re-initialiser la case.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), isGridFull() && !gridFrozen && /*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"btn btn-primary\",\n      onClick: freezeGrid,\n      children: \"Entrer les d\\xE9finitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 46\n    }, this), gridFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Definitions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Horizontal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: solutions.map()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Vertical\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GridCreator, \"mLw7itt1TUJzf9OXxQZgktm5wZI=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = GridCreator;\nexport default GridCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridCreator\");","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js"],"names":["React","useEffect","useState","useGlobalState","pkg","require","GridCreator","globalState","dimensions","setDimensions","dimensionsFrozen","setDimensionsFrozen","gridFrozen","setGridFrozen","solutions","setSolutions","selectedBlock","setSelectedBlock","onChangeWidth","ev","target","value","onChangeHeight","freezeDimensions","arr","i","push","j","freezeGrid","selectBlock","setSolutionXY","e","preventDefault","char","key","toLowerCase","length","test","newSol","toUpperCase","isGridFull","serializedSolution","map","l","c","join","line","val","width","height","border","outline","textAlign","caretColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\n\nconst pkg = require('../../package.json')\n\nfunction GridCreator() {\n    const globalState = useGlobalState()\n    const [dimensions, setDimensions] = useState([10, 10])\n    const [dimensionsFrozen, setDimensionsFrozen] = useState(false)\n    const [gridFrozen, setGridFrozen] = useState(false)\n    const [solutions, setSolutions] = useState([])\n    const [selectedBlock, setSelectedBlock] = useState(null)\n\n    const onChangeWidth = (ev) => {\n        setDimensions([ev.target.value, dimensions[1]])\n    }\n    const onChangeHeight = (ev) => {\n        setDimensions([dimensions[0], ev.target.value])\n    }\n\n    const freezeDimensions = () => {\n        setDimensionsFrozen(true)\n        \n        const arr = []\n        for (let i=0; i < dimensions[1]; i++) {\n            arr.push([])\n            for (let j=0; j < dimensions[0]; j++) {\n                arr[i].push('')\n            }\n        }\n        setSolutions(arr)\n    }\n\n    const freezeGrid = () => {\n        setGridFrozen(true)\n    }\n   \n    const selectBlock = (i, j) => {\n        if(gridFrozen) return\n        setSelectedBlock([i, j])\n    }\n\n    const setSolutionXY = (i, j, e) => {\n        e.preventDefault()\n        if(gridFrozen) return\n        const char = e.key.toLowerCase()\n        if (char.length === 1 && /[a-z -]/.test(char)){\n            const newSol = solutions;\n            newSol[i][j] = char.toUpperCase()\n            setSolutions(newSol)\n            setSelectedBlock(null);\n        }\n        if(char === 'backspace'){\n            const newSol = solutions;\n            newSol[i][j] = ''\n            setSolutions(newSol)\n            setSelectedBlock(null);\n        }\n    }\n\n    const isGridFull = () => {\n        const serializedSolution = solutions.map(l=>l.map(c=>c).join('')).join('')\n        return serializedSolution.length === dimensions[0]*dimensions[1]\n    }\n\n    return (\n        <div className=\"container main-container\">\n            <h1>Nouvelle grille</h1>\n            {!dimensionsFrozen && (<>\n                <h3>Dimensions</h3>\n                <label for=\"width\">Largeur</label>\n                <input name=\"width\" type=\"number\" min=\"1\" onChange={onChangeWidth} defaultValue={dimensions[0]}></input>\n                <label for=\"height\">Hauteur</label>\n                <input name=\"height\" type=\"number\" min=\"1\" onChange={onChangeHeight} defaultValue={dimensions[1]}></input>\n                <button class=\"btn btn-primary\" onClick={freezeDimensions}>Continuer</button>\n            </>)}\n            {dimensionsFrozen && (<><table>\n                { solutions.map((line, i)=>(\n                    <tr>{line.map((val, j)=>(<td style={{width: '2em', height: '2em', border: '1px solid #000'}}><input type='text' onFocus={() => selectBlock(i, j)} onUnfocus={() => selectBlock(null)} style={{outline: 'none', textAlign: 'center', border: '0', caretColor: 'transparent', width: '2em', backgroundColor: ((selectedBlock && (selectedBlock[0] === i && selectedBlock[1] === j)) ? 'red' : (val === ' ' ? 'black' : 'white'))}} onKeyDown={(e) => setSolutionXY(i, j, e)} value={solutions[i][j] ? val : ''}/></td>))}</tr>\n                ))\n                }\n                </table><p>Cliquer sur une case et taper la lettre désiré, Espace pour noircire la case, Retour arrière pour re-initialiser la case.</p></>)\n            }\n            {isGridFull() && !gridFrozen && (<button class=\"btn btn-primary\" onClick={freezeGrid}>Entrer les définitions</button>)}\n            {\n                gridFrozen && (<><h3>Definitions</h3>\n                <h4>Horizontal</h4>\n                <div>\n                {solutions.map()}\n                </div>\n                <h4>Vertical</h4>\n                <div>\n                    \n                </div></>)\n            }\n        </div>\n    )\n}\n\nexport default GridCreator"]},"metadata":{},"sourceType":"module"}