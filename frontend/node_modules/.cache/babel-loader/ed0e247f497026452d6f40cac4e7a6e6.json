{"ast":null,"code":"var _jsxFileName = \"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useGlobalState from '../utils/useGlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst pkg = require('../../package.json');\n\nfunction GridCreator() {\n  _s();\n\n  const globalState = useGlobalState();\n  const [dimensions, setDimensions] = useState([10, 10]);\n  const [dimensionsFrozen, setDimensionsFrozen] = useState(false);\n  const [solutions, setSolutions] = useState([]);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [serializedSolution, setSerializedSolution] = useState('');\n\n  const onChangeWidth = ev => {\n    setDimensions([ev.target.value, dimensions[1]]);\n  };\n\n  const onChangeHeight = ev => {\n    setDimensions([dimensions[0], ev.target.value]);\n  };\n\n  const freezeDimensions = () => {\n    setDimensionsFrozen(true);\n    const arr = [];\n\n    for (let i = 0; i < dimensions[1]; i++) {\n      arr.push([]);\n\n      for (let j = 0; j < dimensions[0]; j++) {\n        arr[i].push('');\n      }\n    }\n\n    setSolutions(arr);\n  };\n\n  const onCharacterType = e => {\n    console.log('>>', selectedBlock);\n\n    if (selectedBlock) {\n      const char = e.key.toLowerCase();\n      console.log(char);\n      const [i, j] = selectedBlock;\n      document.removeEventListener('keydown', onCharacterType);\n\n      if (/[a-z -]/.test(char)) {\n        const newSol = solutions;\n        newSol[i][j] = char.toUpperCase();\n        setSolutions(newSol);\n        setSerializedSolution(newSol);\n        setSelectedBlock(null);\n      }\n    }\n  };\n\n  const selectBlock = (i, j) => {\n    document.removeEventListener('keydown', onCharacterType);\n    setSelectedBlock([i, j]);\n    document.addEventListener('keydown', onCharacterType);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nouvelle grille\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), !dimensionsFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dimensions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"width\",\n        children: \"Largeur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"width\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeWidth,\n        defaultValue: dimensions[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"height\",\n        children: \"Hauteur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"height\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeHeight,\n        defaultValue: dimensions[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-primary\",\n        onClick: freezeDimensions,\n        children: \"Continuer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), dimensionsFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: solutions.map((line, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: line.map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              width: '1em',\n              height: '1em',\n              textAlign: 'center',\n              border: '1px solid #000',\n              backgroundColor: selectedBlock && selectedBlock[0] === i && selectedBlock[1] === j ? 'red' : val === ' ' ? 'black' : 'white'\n            },\n            onClick: () => selectBlock(i, j),\n            children: solutions[i][j] ? val : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \" \"\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 46\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cliquer sur une case et taper la lettre d\\xE9sir\\xE9, taper espace pour noircire la case.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GridCreator, \"Eq9x7wzKHGVOGO97c9CoY1lofyk=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = GridCreator;\nexport default GridCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridCreator\");","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js"],"names":["React","useEffect","useState","useGlobalState","pkg","require","GridCreator","globalState","dimensions","setDimensions","dimensionsFrozen","setDimensionsFrozen","solutions","setSolutions","selectedBlock","setSelectedBlock","serializedSolution","setSerializedSolution","onChangeWidth","ev","target","value","onChangeHeight","freezeDimensions","arr","i","push","j","onCharacterType","e","console","log","char","key","toLowerCase","document","removeEventListener","test","newSol","toUpperCase","selectBlock","addEventListener","map","line","val","width","height","textAlign","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\n\nconst pkg = require('../../package.json')\n\nfunction GridCreator() {\n    const globalState = useGlobalState()\n    const [dimensions, setDimensions] = useState([10, 10])\n    const [dimensionsFrozen, setDimensionsFrozen] = useState(false)\n    const [solutions, setSolutions] = useState([])\n    const [selectedBlock, setSelectedBlock] = useState(null)\n    const [serializedSolution, setSerializedSolution] = useState('')\n\n    const onChangeWidth = (ev) => {\n        setDimensions([ev.target.value, dimensions[1]])\n    }\n    const onChangeHeight = (ev) => {\n        setDimensions([dimensions[0], ev.target.value])\n    }\n\n    const freezeDimensions = () => {\n        setDimensionsFrozen(true)\n        \n        const arr = []\n        for (let i=0; i < dimensions[1]; i++) {\n            arr.push([])\n            for (let j=0; j < dimensions[0]; j++) {\n                arr[i].push('')\n            }\n        }\n        setSolutions(arr)\n    }\n\n    const onCharacterType = (e) => {\n        console.log('>>', selectedBlock)\n        if(selectedBlock) {\n            const char = e.key.toLowerCase()\n            console.log(char)\n            const [i, j] = selectedBlock;\n            document.removeEventListener('keydown', onCharacterType);\n            if (/[a-z -]/.test(char)){\n                const newSol = solutions;\n                newSol[i][j] = char.toUpperCase()\n                setSolutions(newSol)\n                setSerializedSolution(newSol)\n                setSelectedBlock(null);\n            }\n        }\n    }\n\n    const selectBlock = (i, j) => {\n        document.removeEventListener('keydown', onCharacterType);\n        setSelectedBlock([i, j])\n        document.addEventListener('keydown', onCharacterType);\n    }\n\n    return (\n        <div className=\"container main-container\">\n            <h1>Nouvelle grille</h1>\n            {!dimensionsFrozen && (<>\n                <h3>Dimensions</h3>\n                <label for=\"width\">Largeur</label>\n                <input name=\"width\" type=\"number\" min=\"1\" onChange={onChangeWidth} defaultValue={dimensions[0]}></input>\n                <label for=\"height\">Hauteur</label>\n                <input name=\"height\" type=\"number\" min=\"1\" onChange={onChangeHeight} defaultValue={dimensions[1]}></input>\n                <button class=\"btn btn-primary\" onClick={freezeDimensions}>Continuer</button>\n            </>)}\n            {dimensionsFrozen && (<><table>\n                { solutions.map((line, i)=>(\n                    <tr>{line.map((val, j)=>(<td style={{width: '1em', height: '1em', textAlign: 'center', border: '1px solid #000', backgroundColor: ((selectedBlock && (selectedBlock[0] === i && selectedBlock[1] === j)) ? 'red' : (val === ' ' ? 'black' : 'white'))}} onClick={() => selectBlock(i, j)}>{solutions[i][j] ? val : (<> </>)}</td>))}</tr>\n                ))\n                }\n                </table><p>Cliquer sur une case et taper la lettre désiré, taper espace pour noircire la case.</p></>)\n            }\n        </div>\n    )\n}\n\nexport default GridCreator"]},"metadata":{},"sourceType":"module"}