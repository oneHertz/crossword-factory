{"ast":null,"code":"import _slicedToArray from\"/Users/rphl/Projects/XWordsApp/crosswords/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/rphl/Projects/XWordsApp/crosswords/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{createContext,useReducer,useContext}from'react';/* Action Types */import{jsx as _jsx}from\"react/jsx-runtime\";var SET_USER='SET_USER';/* Define a context and a reducer for updating the context */var GlobalStateContext=/*#__PURE__*/createContext();var initialState={user:JSON.parse(window.localStorage.getItem('drawmyroute_user'))};var globalStateReducer=function globalStateReducer(state,action){switch(action.type){case SET_USER:window.localStorage.setItem('drawmyroute_user',JSON.stringify(_objectSpread({},action.payload)));return _objectSpread(_objectSpread({},state),{},{user:_objectSpread({},action.payload)});default:return state;}};/* Export a component to provide the context to its children. This is used in our _app.js file */export var GlobalStateProvider=function GlobalStateProvider(_ref){var children=_ref.children;var _useReducer=useReducer(globalStateReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(GlobalStateContext.Provider,{value:[state,dispatch],children:children});};/* \nDefault export is a hook that provides a simple API for updating the global state. \nThis also allows us to keep all of this state logic in this one file\n*/var useGlobalState=function useGlobalState(){var _useContext=useContext(GlobalStateContext),_useContext2=_slicedToArray(_useContext,2),state=_useContext2[0],dispatch=_useContext2[1];var setUser=function setUser(_ref2){var username=_ref2.username,api_token=_ref2.api_token;dispatch({type:SET_USER,payload:{username:username,api_token:api_token}});};return{setUser:setUser,user:_objectSpread({},state.user)};};export default useGlobalState;","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/utils/useGlobalState.js"],"names":["React","createContext","useReducer","useContext","SET_USER","GlobalStateContext","initialState","user","JSON","parse","window","localStorage","getItem","globalStateReducer","state","action","type","setItem","stringify","payload","GlobalStateProvider","children","dispatch","useGlobalState","setUser","username","api_token"],"mappings":"iVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,UAAxB,CAAoCC,UAApC,KAAsD,OAAtD,CAEA,kB,2CACA,GAAMC,CAAAA,QAAQ,CAAG,UAAjB,CAEA,6DACA,GAAMC,CAAAA,kBAAkB,cAAGJ,aAAa,EAAxC,CAEA,GAAMK,CAAAA,YAAY,CAAG,CACnBC,IAAI,CAAEC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,kBAA5B,CAAX,CADa,CAArB,CAIA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAQC,MAAR,CAAmB,CAC5C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKZ,CAAAA,QAAL,CACEM,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,kBAA5B,CAAgDT,IAAI,CAACU,SAAL,kBAAoBH,MAAM,CAACI,OAA3B,EAAhD,EACA,sCACKL,KADL,MAEEP,IAAI,kBAAOQ,MAAM,CAACI,OAAd,CAFN,GAKF,QACE,MAAOL,CAAAA,KAAP,CATJ,CAWD,CAZD,CAcA,iGAEA,MAAO,IAAMM,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,iBACzBnB,UAAU,CAClCW,kBADkC,CAElCP,YAFkC,CADe,4CAC5CQ,KAD4C,iBACrCQ,QADqC,iBAMnD,mBACE,KAAC,kBAAD,CAAoB,QAApB,EAA6B,KAAK,CAAE,CAACR,KAAD,CAAQQ,QAAR,CAApC,UACGD,QADH,EADF,CAKD,CAXM,CAaP;AACA;AACA;AACA,EAEA,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,iBACDpB,UAAU,CAACE,kBAAD,CADT,4CACpBS,KADoB,iBACbQ,QADa,iBAG3B,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,OAA6B,IAA1BC,CAAAA,QAA0B,OAA1BA,QAA0B,CAAhBC,SAAgB,OAAhBA,SAAgB,CAC3CJ,QAAQ,CAAC,CACPN,IAAI,CAAEZ,QADC,CAEPe,OAAO,CAAE,CACPM,QAAQ,CAARA,QADO,CAEPC,SAAS,CAATA,SAFO,CAFF,CAAD,CAAR,CAOD,CARD,CAUA,MAAO,CACLF,OAAO,CAAPA,OADK,CAELjB,IAAI,kBAAOO,KAAK,CAACP,IAAb,CAFC,CAAP,CAID,CAjBD,CAmBA,cAAegB,CAAAA,cAAf","sourcesContent":["import React from 'react'\nimport { createContext, useReducer, useContext } from 'react';\n\n/* Action Types */\nconst SET_USER = 'SET_USER';\n\n/* Define a context and a reducer for updating the context */\nconst GlobalStateContext = createContext();\n\nconst initialState = {\n  user: JSON.parse(window.localStorage.getItem('drawmyroute_user'))\n};\n\nconst globalStateReducer = (state, action) => {\n  switch (action.type) {\n    case SET_USER:\n      window.localStorage.setItem('drawmyroute_user', JSON.stringify({ ...action.payload }))\n      return {\n        ...state,\n        user: { ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n/* Export a component to provide the context to its children. This is used in our _app.js file */\n\nexport const GlobalStateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(\n    globalStateReducer, \n    initialState\n  );\n\n  return (\n    <GlobalStateContext.Provider value={[state, dispatch]}>\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n\n/* \nDefault export is a hook that provides a simple API for updating the global state. \nThis also allows us to keep all of this state logic in this one file\n*/\n\nconst useGlobalState = () => {\n  const [state, dispatch] = useContext(GlobalStateContext);\n\n  const setUser = ({ username, api_token }) => {\n    dispatch({ \n      type: SET_USER, \n      payload: { \n        username,\n        api_token,\n      } \n    });\n  };\n\n  return {\n    setUser,\n    user: { ...state.user },\n  };\n};\n\nexport default useGlobalState;"]},"metadata":{},"sourceType":"module"}