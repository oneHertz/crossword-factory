{"ast":null,"code":"var _jsxFileName = \"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/utils/useGlobalState.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { createContext, useReducer, useContext } from 'react';\n/* Action Types */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SET_USER = 'SET_USER';\n/* Define a context and a reducer for updating the context */\n\nconst GlobalStateContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: JSON.parse(window.localStorage.getItem('drawmyroute_user'))\n};\n\nconst globalStateReducer = (state, action) => {\n  switch (action.type) {\n    case SET_USER:\n      window.localStorage.setItem('drawmyroute_user', JSON.stringify({ ...action.payload\n      }));\n      return { ...state,\n        user: { ...action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n/* Export a component to provide the context to its children. This is used in our _app.js file */\n\n\nexport const GlobalStateProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(globalStateReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: [state, dispatch],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n/* \nDefault export is a hook that provides a simple API for updating the global state. \nThis also allows us to keep all of this state logic in this one file\n*/\n\n_s(GlobalStateProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalStateProvider;\n\nconst useGlobalState = () => {\n  _s2();\n\n  const [state, dispatch] = useContext(GlobalStateContext);\n\n  const setUser = ({\n    username,\n    api_token\n  }) => {\n    dispatch({\n      type: SET_USER,\n      payload: {\n        username,\n        api_token\n      }\n    });\n  };\n\n  return {\n    setUser,\n    user: { ...state.user\n    }\n  };\n};\n\n_s2(useGlobalState, \"R/iqDjZuP7G94n7Hryyh+IyzlJk=\");\n\nexport default useGlobalState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStateProvider\");","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/utils/useGlobalState.js"],"names":["React","createContext","useReducer","useContext","SET_USER","GlobalStateContext","initialState","user","JSON","parse","window","localStorage","getItem","globalStateReducer","state","action","type","setItem","stringify","payload","GlobalStateProvider","children","dispatch","useGlobalState","setUser","username","api_token"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;AAEA;;;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA;;AACA,MAAMC,kBAAkB,gBAAGJ,aAAa,EAAxC;AAEA,MAAMK,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,kBAA5B,CAAX;AADa,CAArB;;AAIA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,QAAL;AACEM,MAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,kBAA5B,EAAgDT,IAAI,CAACU,SAAL,CAAe,EAAE,GAAGH,MAAM,CAACI;AAAZ,OAAf,CAAhD;AACA,aAAO,EACL,GAAGL,KADE;AAELP,QAAAA,IAAI,EAAE,EAAE,GAAGQ,MAAM,CAACI;AAAZ;AAFD,OAAP;;AAKF;AACE,aAAOL,KAAP;AATJ;AAWD,CAZD;AAcA;;;AAEA,OAAO,MAAMM,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBpB,UAAU,CAClCW,kBADkC,EAElCP,YAFkC,CAApC;AAKA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE,CAACQ,KAAD,EAAQQ,QAAR,CAApC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAXM;AAaP;AACA;AACA;AACA;;GAhBaD,mB;;KAAAA,mB;;AAkBb,MAAMG,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACT,KAAD,EAAQQ,QAAR,IAAoBnB,UAAU,CAACE,kBAAD,CAApC;;AAEA,QAAMmB,OAAO,GAAG,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA6B;AAC3CJ,IAAAA,QAAQ,CAAC;AACPN,MAAAA,IAAI,EAAEZ,QADC;AAEPe,MAAAA,OAAO,EAAE;AACPM,QAAAA,QADO;AAEPC,QAAAA;AAFO;AAFF,KAAD,CAAR;AAOD,GARD;;AAUA,SAAO;AACLF,IAAAA,OADK;AAELjB,IAAAA,IAAI,EAAE,EAAE,GAAGO,KAAK,CAACP;AAAX;AAFD,GAAP;AAID,CAjBD;;IAAMgB,c;;AAmBN,eAAeA,cAAf","sourcesContent":["import React from 'react'\nimport { createContext, useReducer, useContext } from 'react';\n\n/* Action Types */\nconst SET_USER = 'SET_USER';\n\n/* Define a context and a reducer for updating the context */\nconst GlobalStateContext = createContext();\n\nconst initialState = {\n  user: JSON.parse(window.localStorage.getItem('drawmyroute_user'))\n};\n\nconst globalStateReducer = (state, action) => {\n  switch (action.type) {\n    case SET_USER:\n      window.localStorage.setItem('drawmyroute_user', JSON.stringify({ ...action.payload }))\n      return {\n        ...state,\n        user: { ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n/* Export a component to provide the context to its children. This is used in our _app.js file */\n\nexport const GlobalStateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(\n    globalStateReducer, \n    initialState\n  );\n\n  return (\n    <GlobalStateContext.Provider value={[state, dispatch]}>\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n\n/* \nDefault export is a hook that provides a simple API for updating the global state. \nThis also allows us to keep all of this state logic in this one file\n*/\n\nconst useGlobalState = () => {\n  const [state, dispatch] = useContext(GlobalStateContext);\n\n  const setUser = ({ username, api_token }) => {\n    dispatch({ \n      type: SET_USER, \n      payload: { \n        username,\n        api_token,\n      } \n    });\n  };\n\n  return {\n    setUser,\n    user: { ...state.user },\n  };\n};\n\nexport default useGlobalState;"]},"metadata":{},"sourceType":"module"}