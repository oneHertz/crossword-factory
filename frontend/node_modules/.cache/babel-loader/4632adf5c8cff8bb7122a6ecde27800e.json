{"ast":null,"code":"var _jsxFileName = \"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/ownGrids.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useGlobalState from '../utils/useGlobalState';\nimport { useParams } from \"react-router-dom\";\nimport { useReactToPrint } from 'react-to-print';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst pkg = require('../../package.json');\n\nfunction OwnGrids() {\n  _s();\n\n  const globalState = useGlobalState();\n  const [list, setList] = useState('');\n  const {\n    username,\n    api_token\n  } = globalState.user;\n\n  const loadGrids = async () => {\n    try {\n      const r = await fetch(process.env.REACT_APP_API_URL + '/user/' + username, {\n        method: 'GET',\n        credentials: 'omit',\n        headers: {\n          'Authorization': 'Token ' + api_token,\n          'Content-Type': 'application/json'\n        }\n      });\n      const list = await r.json();\n      setList(list.crosswords_grids);\n    } catch (e) {\n      window.location = '/';\n    }\n  };\n\n  useEffect(() => {\n    (async () => await loadGrids())();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container main-container\",\n    children: list.length && list.map(e => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [e.title, \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/grille/\" + e.id,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Modifier\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 62\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 35\n          }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 96\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [e.width, \"x\", e.height]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Cr\\xE9\\xE9e \", new Date(e.creation_date).toLocaleDateString(\"fr-FR\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 97\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Modifi\\xE9e \", new Date(e.modification_date).toLocaleDateString(\"fr-FR\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OwnGrids, \"wiSgCcQ0ExL87yPug1NN5q8A4ZA=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = OwnGrids;\nexport default OwnGrids;\n\nvar _c;\n\n$RefreshReg$(_c, \"OwnGrids\");","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/ownGrids.js"],"names":["React","useEffect","useState","useGlobalState","useParams","useReactToPrint","pkg","require","OwnGrids","globalState","list","setList","username","api_token","user","loadGrids","r","fetch","process","env","REACT_APP_API_URL","method","credentials","headers","json","crosswords_grids","e","window","location","length","map","title","id","width","height","Date","creation_date","toLocaleDateString","modification_date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,eAAT,QAAgC,gBAAhC;;;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAMC,WAAW,GAAGN,cAAc,EAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BJ,WAAW,CAACK,IAA5C;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC1B,QAAI;AACA,YAAMC,CAAC,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA8B,QAA9B,GAAuCR,QAAxC,EAAiD;AAClES,QAAAA,MAAM,EAAE,KAD0D;AAElEC,QAAAA,WAAW,EAAE,MAFqD;AAGlEC,QAAAA,OAAO,EAAE;AACL,2BAAiB,WAAWV,SADvB;AAEL,0BAAgB;AAFX;AAHyD,OAAjD,CAArB;AAQA,YAAMH,IAAI,GAAG,MAAMM,CAAC,CAACQ,IAAF,EAAnB;AACAb,MAAAA,OAAO,CAACD,IAAI,CAACe,gBAAN,CAAP;AACH,KAXD,CAWE,OAAMC,CAAN,EAAS;AACPC,MAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACH;AACJ,GAfD;;AAiBA3B,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAa,MAAMc,SAAS,EAA7B;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,cACML,IAAI,CAACmB,MAAL,IAAgBnB,IAAI,CAACoB,GAAL,CAAUJ,CAAC,iBACzB;AAAA,8BAAE;AAAA,gCACE;AAAA,qBAAKA,CAAC,CAACK,KAAP,oBAAc,QAAC,IAAD;AAAM,YAAA,EAAE,EAAE,aAAWL,CAAC,CAACM,EAAvB;AAAA,mCAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,kBAAd,qBAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,qBAAON,CAAC,CAACO,KAAT,OAAiBP,CAAC,CAACQ,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAEmC;AAAA;AAAA;AAAA;AAAA,gBAFnC,eAGE;AAAA,qCAAc,IAAIC,IAAJ,CAAST,CAAC,CAACU,aAAX,CAAD,CAA4BC,kBAA5B,CAA+C,OAA/C,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAG8E;AAAA;AAAA;AAAA;AAAA,gBAH9E,eAIE;AAAA,qCAAiB,IAAIF,IAAJ,CAAST,CAAC,CAACY,iBAAX,CAAD,CAAgCD,kBAAhC,CAAmD,OAAnD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,eAMA;AAAA;AAAA;AAAA;AAAA,cANA;AAAA,oBADc;AADtB;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAzCQ7B,Q;UACeL,c;;;KADfK,Q;AA2CT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\nimport { useParams } from \"react-router-dom\";\nimport { useReactToPrint } from 'react-to-print';\nconst pkg = require('../../package.json')\n\n\nfunction OwnGrids() {\n    const globalState = useGlobalState()\n    const [list, setList] = useState('')\n    const { username, api_token } = globalState.user\n\n    const loadGrids = async () => {\n        try {\n            const r = await fetch(process.env.REACT_APP_API_URL+'/user/'+username,{\n                method: 'GET',\n                credentials: 'omit',\n                headers: {\n                    'Authorization': 'Token ' + api_token,\n                    'Content-Type': 'application/json'\n                }\n            })\n            const list = await r.json()\n            setList(list.crosswords_grids)\n        } catch(e) {\n            window.location = '/'\n        }\n    }\n\n    useEffect(()=>{\n        (async () => (await loadGrids()))()     \n    }, [])\n\n    return (\n        <div className=\"container main-container\">\n            { list.length && (list.map((e=>(\n                <><div>\n                    <h3>{e.title} <Link to={\"/grille/\"+e.id}><button>Modifier</button></Link>  <button>View</button></h3>\n                    <span>{e.width}x{e.height}</span><br/>\n                    <span>Créée {(new Date(e.creation_date)).toLocaleDateString(\"fr-FR\")}</span><br/>\n                    <span>Modifiée {(new Date(e.modification_date)).toLocaleDateString(\"fr-FR\")}</span>\n                </div>\n                <hr/>\n                </>\n            ))))\n            }\n        </div>\n    )\n}\n\nexport default OwnGrids"]},"metadata":{},"sourceType":"module"}