{"ast":null,"code":"var _jsxFileName = \"/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useGlobalState from '../utils/useGlobalState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst pkg = require('../../package.json');\n\nfunction GridCreator() {\n  _s();\n\n  const globalState = useGlobalState();\n  const [dimensions, setDimensions] = useState([10, 10]);\n  const [dimensionsFrozen, setDimensionsFrozen] = useState(false);\n  const [solutions, setSolutions] = useState([]);\n\n  const onChangeWidth = ev => {\n    setDimensions([ev.target.value, dimensions[1]]);\n  };\n\n  const onChangeHeight = ev => {\n    setDimensions([dimensions[0], ev.target.value]);\n  };\n\n  const freezeDimensions = () => {\n    setDimensionsFrozen(true);\n    const arr = [];\n\n    for (let i = 0; i < dimensions[1]; i++) {\n      arr.push([]);\n\n      for (let j = 0; j < dimensions[0]; j++) {\n        arr[i].push('');\n      }\n    }\n\n    setSolutions(arr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nouvelle grille\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), !dimensionsFrozen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dimensions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"width\",\n        children: \"Largeur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"width\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeWidth,\n        defaultValue: dimensions[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"height\",\n        children: \"Hauteur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"height\",\n        type: \"number\",\n        min: \"1\",\n        onChange: onChangeHeight,\n        defaultValue: dimensions[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"btn btn-primary\",\n        onClick: freezeDimensions,\n        children: \"Continuer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), dimensionsFrozen && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: solutions.map((line, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        style: \"border: 1px solid \",\n        children: line.map((_, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [i, \", \", j]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 71\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GridCreator, \"Xz5qJmoUhaDSU6ZXKjg7HmJJ46U=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = GridCreator;\nexport default GridCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridCreator\");","map":{"version":3,"sources":["/Users/rphl/Projects/XWordsApp/crosswords/frontend/src/components/new.js"],"names":["React","useEffect","useState","useGlobalState","pkg","require","GridCreator","globalState","dimensions","setDimensions","dimensionsFrozen","setDimensionsFrozen","solutions","setSolutions","onChangeWidth","ev","target","value","onChangeHeight","freezeDimensions","arr","i","push","j","map","line","_"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport useGlobalState from '../utils/useGlobalState'\n\nconst pkg = require('../../package.json')\n\nfunction GridCreator() {\n    const globalState = useGlobalState()\n    const [dimensions, setDimensions] = useState([10, 10])\n    const [dimensionsFrozen, setDimensionsFrozen] = useState(false)\n    const [solutions, setSolutions] = useState([])\n\n    const onChangeWidth = (ev) => {\n        setDimensions([ev.target.value, dimensions[1]])\n    }\n    const onChangeHeight = (ev) => {\n        setDimensions([dimensions[0], ev.target.value])\n    }\n\n    const freezeDimensions = () => {\n        setDimensionsFrozen(true)\n        \n        const arr = []\n        for (let i=0; i < dimensions[1]; i++) {\n            arr.push([])\n            for (let j=0; j < dimensions[0]; j++) {\n                arr[i].push('')\n            }\n        }\n        setSolutions(arr)\n    }\n\n    return (\n        <div className=\"container main-container\">\n            <h1>Nouvelle grille</h1>\n            {!dimensionsFrozen && (<>\n                <h3>Dimensions</h3>\n                <label for=\"width\">Largeur</label>\n                <input name=\"width\" type=\"number\" min=\"1\" onChange={onChangeWidth} defaultValue={dimensions[0]}></input>\n                <label for=\"height\">Hauteur</label>\n                <input name=\"height\" type=\"number\" min=\"1\" onChange={onChangeHeight} defaultValue={dimensions[1]}></input>\n                <button class=\"btn btn-primary\" onClick={freezeDimensions}>Continuer</button>\n            </>)}\n            {dimensionsFrozen && (<table>\n                { solutions.map((line, i)=>(\n                    <tr style=\"border: 1px solid \">{line.map((_, j)=>(<td>{i}, {j}</td>))}</tr>\n                ))\n                }\n                </table>)\n            }\n        </div>\n    )\n}\n\nexport default GridCreator"]},"metadata":{},"sourceType":"module"}